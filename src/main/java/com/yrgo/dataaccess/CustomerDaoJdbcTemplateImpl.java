package com.yrgo.dataaccess;

import com.yrgo.domain.Call;
import com.yrgo.domain.Customer;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.List;

public class CustomerDaoJdbcTemplateImpl implements CustomerDao {
    private static final String INSERT_NEW_CUSTOMER_SQL = "INSERT INTO CUSTOMER " +
            "(COMPANY_NAME, EMAIL, TELEPHONE, NOTES) VALUES (?,?,?,?)";
    private static final String CREATE_CUSTOMER_TABLE = "CREATE TABLE " + "CUSTOMER " +
            "(CUSTOMER_ID integer generated by default as identity (start with 1), " +
            "COMPANY_NAME VARCHAR(255), " +
            "EMAIL VARCHAR(255), " +
            "TELEPHONE VARCHAR(30), " +
            "NOTES VARCHAR(255))";
    private static final String CREATE_CUSTOMER_CALL_TABLE = "CREATE TABLE " + "CUSTOMER_CALL " +
            "(CALL_ID integer generated by default as identity (start with 1), " +
            "TIME_AND_DATE DATE," +
            "NOTES VARCHAR(255), " +
            "FOREIGN KEY CUSTOMER_ID VARCHAR(20))";
    private static final String UPDATE_SQL = "UPDATE CUSTOMER SET CUSTOMER_ID=?, COMPANY_NAME=?, EMAIL=?, TELEPHONE=?, NOTES=?, CALLS=? WHERE CUSTOMER_ID=?";
    private static final String DELETE_SQL = "DELETE FROM CUSTOMER WHERE CUSTOMER_ID=?";
    private static final String GET_CUSTOMER_BY_ID_SQL = "SELECT * FROM CUSTOMER WHERE CUSTOMER_ID=?";
    private static final String GET_CUSTOMERS_BY_NAME_SQL = "SELECT * FROM CUSTOMER WHERE COMPANY_NAME=?";
    private static final String GET_ALL_CUSTOMERS_SQL = "SELECT * FROM CUSTOMER";
    private static final String ADD_CALL_SQL = "UPDATE CUSTOMER_CALL SET TIME_AND_DATE=?, NOTES=? WHERE CUSTOMER_ID=?";
    private static final String GET_CUSTOMER_DETAILS_SQL = "SELECT DETAILS FROM ACTION WHERE OWNING_USER=?";
    private static final String GET_ALL_CUSTOMER_CALLS_SQL = "SELECT * FROM CUSTOMER_CALL WHERE CUSTOMER_ID=?";

    private JdbcTemplate template;

    CustomerDaoJdbcTemplateImpl(JdbcTemplate template) {
        this.template = template;
    }

    @Override
    public void create(Customer customer) {
        template.update(INSERT_NEW_CUSTOMER_SQL,
                customer.getCompanyName(),
                customer.getEmail(),
                customer.getTelephone(),
                customer.getNotes());
    }

    private void createTables() {
        try {
            this.template.update(CREATE_CUSTOMER_TABLE);
            this.template.update(CREATE_CUSTOMER_CALL_TABLE);
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            System.out.println("Assuming the Action table exists");
        }
    }

    @Override
    public Customer getById(String customerId) throws RecordNotFoundException {
        return this.template.queryForObject(GET_CUSTOMER_BY_ID_SQL, new CustomerRowMapper<Customer>(), customerId);
    }

    @Override
    public List<Customer> getByName(String name) {
        return this.template.query(GET_CUSTOMERS_BY_NAME_SQL, new CustomerRowMapper<Customer>(), name);
    }

    @Override
    public void update(Customer customerToUpdate) throws RecordNotFoundException {
        this.template.update(UPDATE_SQL, customerToUpdate.getCustomerId(),
                customerToUpdate.getCompanyName(), customerToUpdate.getEmail(),
                customerToUpdate.getTelephone(), customerToUpdate.getCalls());
    }

    @Override
    public void delete(Customer oldCustomer) throws RecordNotFoundException {
        this.template.update(DELETE_SQL, oldCustomer.getCustomerId());
    }

    @Override
    public List<Customer> getAllCustomers() {
        return this.template.query(GET_ALL_CUSTOMERS_SQL, new CustomerRowMapper<Customer>());
    }

    @Override
    public Customer getFullCustomerDetail(String customerId) throws RecordNotFoundException {
        Customer customer = getById(customerId);
        List<Call> calls = this.template.query(GET_ALL_CUSTOMER_CALLS_SQL, new CallRowMapper<Call>(), customerId);
        customer.setCalls(calls);
        return customer;
    }

    @Override
    public void addCall(Call newCall, String customerId) throws RecordNotFoundException {
        this.template.update(ADD_CALL_SQL, newCall, customerId);
    }

    class CustomerRowMapper<C> implements RowMapper<Customer> {
        public Customer mapRow(ResultSet rs, int arg1) throws SQLException {
            String customerId = rs.getString("CUSTOMER_ID");
            String companyName = rs.getString("COMPANY_NAME");
            String email = rs.getString("EMAIL");
            String telephone = rs.getString("TELEPHONE");
            String notes = rs.getString("NOTES");
            return new Customer(customerId, companyName, email, telephone, notes);
        }
    }

    class CallRowMapper<C> implements RowMapper<Call> {
        public Call mapRow(ResultSet rs, int arg1) throws SQLException {
            String notes = rs.getString("NOTES");
            Date timeAndDate = rs.getDate("TIME_AND_DATE");
            return new Call(notes, timeAndDate);
        }
    }
}
